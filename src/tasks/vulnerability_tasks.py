from crewai import Task
from typing import List, Dict, Any
import logging

logger = logging.getLogger(__name__)

class VulnerabilityTasks:
    """Task definitions for vulnerability validation workflow"""
    
    def create_read_task(self, agent, pdf_path: str, document_id: str = None) -> Task:
        """Create task for PDF reading and interpretation"""
        return Task(
            description=f"""
            Extract and interpret vulnerability information from the PDF report located at: {pdf_path}
            
            Your responsibilities:
            1. Use the PDF reader tool to extract all text content from the report
            2. Analyze and structure the vulnerability information
            3. Identify and categorize each vulnerability with:
               - Vulnerability type (XSS, SQLi, CSRF, etc.)
               - Severity level and CVSS score if available
               - Affected components/endpoints
               - Proof of concept details
               - Remediation recommendations
            4. Count total vulnerabilities found
            5. Organize findings in a structured format for other agents
            6. Use Database Update tool to save your analysis results to the database with stage='reader'
               - Use document_id: {document_id}
               - Convert your analysis results to JSON string format
               - Call Database Update with document_id='{document_id}', stage='reader', and your JSON data
            
            Follow ReAct methodology:
            - REASON about the document structure and content
            - ACT by extracting text and analyzing content
            - REASON about vulnerability categorization
            - ACT by structuring the information
            
            Expected output: Structured vulnerability report with metadata, summary, and detailed vulnerability list.
            
            IMPORTANT: You MUST return the output as valid JSON format wrapped in ```json code blocks.
            Do NOT return a summary or description - return the actual JSON data.
            """,
            agent=agent,
            expected_output="""
            CRITICAL: Before providing your final output, you MUST use the Database Update tool:
            1. Get the document_id from the task context
            2. Convert your analysis results to JSON string format
            3. Call Database Update with document_id, stage='reader', and your JSON data
            
            Return ONLY valid JSON in the following exact format wrapped in ```json code blocks:
            
            ```json
            {
              "report_metadata": {
                "title": "Vulnerability Assessment Report",
                "date": "YYYY-MM-DD",
                "target_application": "application_url_or_name"
              },
              "executive_summary": "Brief summary of findings",
              "vulnerabilities": [
                {
                  "vulnerability_type": "Type of vulnerability",
                  "severity_level": "Critical/High/Medium/Low",
                  "affected_component": "Component or endpoint",
                  "description": "Detailed description",
                  "proof_of_concept": "PoC details if available",
                  "remediation": "Recommended fix"
                }
              ],
              "total_vulnerabilities": 0
            }
            ```
            
            Do NOT include any text outside the JSON code block.
            """
        )
    
    def create_static_task(self, agent, source_path: str, document_id: str = None) -> Task:
        """Create task for static code analysis"""
        return Task(
            description=f"""
            Perform comprehensive static code analysis on the source code located at: {source_path}
            
            Your responsibilities:
            1. Execute Semgrep security scan on the entire codebase using 'auto' configuration (NOT p/security-audit)
            2. Analyze Semgrep results and correlate with reported vulnerabilities
            3. Investigate specific code files mentioned in vulnerability reports
            4. Use file reading tools to examine suspicious code patterns
            5. Determine vulnerability status for each reported issue:
               - Vulnerable: Clear evidence of exploitable vulnerability
               - Possible: Potential vulnerability requiring further investigation
               - Not Vulnerable: No evidence found or false positive
            6. Use Database Update tool to save your analysis results to the database with stage='static'
               - Use document_id: {document_id}
               - Convert your analysis results to JSON string format
               - Call Database Update with document_id='{document_id}', stage='static', and your JSON data
            
            Follow ReAct methodology:
            - REASON about which vulnerabilities to investigate
            - ACT by running Semgrep and examining code
            - REASON about correlation between findings and reports
            - ACT by investigating specific files and patterns
            - REASON about exploitability and assign status
            
            Expected output: Static analysis report with vulnerability assessments and evidence.
            """,
            agent=agent,
            expected_output="""
            CRITICAL: Before providing your final output, you MUST use the Database Update tool:
            1. Get the document_id from the task context
            2. Convert your analysis results to JSON string format
            3. Call Database Update with document_id, stage='static', and your JSON data
            
            A detailed static analysis report containing:
            - Semgrep scan results summary
            - Vulnerability-by-vulnerability assessment with status (Vulnerable/Possible/Not Vulnerable)
            - Evidence and reasoning for each assessment
            - Detailed Code locations and patterns identified
            - Confidence levels for each finding
            - Additional security issues discovered
            """
        )
    
    def create_dynamic_task(self, agent, target_url: str, document_id: str = None) -> Task:
        """Create task for dynamic vulnerability testing"""
        return Task(
            description=f"""
            Perform dynamic vulnerability testing against the live application at: {target_url}
            
            Your responsibilities:
            1. Conduct reconnaissance to understand the application structure
            2. Test each reported vulnerability through live exploitation attempts
            3. Adapt testing approach based on server responses and context:
               - Check for authentication requirements
               - Handle CSRF tokens and session management
               - Modify payloads based on application behavior
               - Iterate testing until conclusive results
            4. Document exploitation attempts and results
            5. Determine exploitability status for each vulnerability
            6. Use Database Update tool to save your analysis results to the database with stage='dynamic'
               - Use document_id: {document_id}
               - Convert your analysis results to JSON string format
               - Call Database Update with document_id='{document_id}', stage='dynamic', and your JSON data
            
            Follow ReAct methodology:
            - REASON about application context and testing approach
            - ACT by performing reconnaissance and initial tests
            - REASON about server responses and adapt strategy
            - ACT by refining payloads and testing methods
            - REASON about exploitability and document findings
            
            Use available network tools: HTTP requests, port scanning, command execution (curl, wget, etc.)
            
            Expected output: Dynamic testing report with exploitation results and evidence.
            """,
            agent=agent,
            expected_output="""
            CRITICAL: Before providing your final output, you MUST use the Database Update tool:
            1. Get the document_id from the task context
            2. Convert your analysis results to JSON string format
            3. Call Database Update with document_id, stage='dynamic', and your JSON data
            
            A comprehensive dynamic testing report containing:
            - Target reconnaissance results
            - Vulnerability-by-vulnerability testing results
            - Detailed Successful exploitation evidence or failure analysis
            - Payload variations and server responses
            - Final exploitability assessment for each vulnerability
            """
        )
    
    def create_triage_task(self, agent, context_tasks: List[Task], language: str = "en", document_id: str = None) -> Task:
        """Create task for vulnerability triage and final assessment"""
        
        # Language-specific instructions
        language_instructions = {
            "en": "Provide your analysis and final report in English.",
            "es": "Proporciona tu análisis y reporte final en español. Todos los textos, descripciones, resúmenes y recomendaciones deben estar en español.",
            "fr": "Fournissez votre analyse et rapport final en français.",
            "de": "Stellen Sie Ihre Analyse und den Abschlussbericht auf Deutsch zur Verfügung.",
            "it": "Fornisci la tua analisi e il rapporto finale in italiano.",
            "pt": "Forneça sua análise e relatório final em português."
        }
        
        language_instruction = language_instructions.get(language, language_instructions["en"])
        
        return Task(
            description=f"""
            Perform comprehensive vulnerability triage by analyzing and correlating findings from all previous agents.
            
            IMPORTANT LANGUAGE REQUIREMENT: {language_instruction}
            
            Your responsibilities:
            1. Analyze findings from PDF analysis, static analysis, and dynamic testing
            2. Correlate evidence across all three analysis methods
            3. Apply decision criteria to determine final vulnerability status:
               - Vulnerable: If dynamic testing confirms exploitation OR static analysis confirms vulnerability
               - Not Vulnerable: If no credible evidence found in any analysis
            4. Recategorize vulnerabilities severity levels based on the evidence of each analysis method
            5. Prioritize vulnerabilities based on exploitability and impact
            6. Generate comprehensive final report with recommendations
            7. Assess the effectiveness of each analysis methodology
            8. Use Database Update tool to save your final triage results to the database with stage='triage'
               - Use document_id: {document_id}
               - Convert your final triage results to JSON string format
               - Call Database Update with document_id='{document_id}', stage='triage', and your JSON data
            
            Follow ReAct methodology:
            - REASON about evidence correlation across all sources
            - ACT by analyzing and comparing findings
            - REASON about vulnerability status based on evidence strength
            - ACT by assigning final status and priority
            - REASON about overall security posture and recommendations
            
            Decision criteria:
            - Dynamic exploitation success = Vulnerable
            - Static analysis confirms vulnerability = Vulnerable
            - Static evidence without dynamic confirmation = Vulnerable (if static analysis is conclusive)
            - Only weak static indicators without confirmation = Not Vulnerable
            - No evidence = Not Vulnerable
            
            REMEMBER: {language_instruction}
            
            Expected output: Final vulnerability assessment report with binary status (Vulnerable/Not Vulnerable) for each issue.
            """,
            agent=agent,
            expected_output=f"""
            CRITICAL: Before providing your final output, you MUST use the Database Update tool:
            1. Get the document_id from the task context
            2. Convert your final triage results to JSON string format
            3. Call Database Update with document_id, stage='triage', and your JSON data
            
            A final comprehensive vulnerability assessment report containing:
            - Executive summary with key findings
            - Vulnerability summary statistics
            - Complete vulnerability triage with final binary status (Vulnerable/Not Vulnerable)
            - Detailed evidence correlation and analysis for each vulnerability
            - Risk prioritization and impact assessment
            - Methodology effectiveness evaluation
            - Security recommendations and next steps
            - Detailed analysis from all three agents for reference
            
            IMPORTANT: {language_instruction}
            """,
            context=context_tasks
        )
    
    def create_single_agent_task(self, agent, task_type: str, **kwargs) -> Task:
        """Create task for single agent execution modes"""
        if task_type == "reader":
            return self.create_read_task(agent, kwargs.get('pdf_path'))
        elif task_type == "static":
            return self.create_static_task(agent, kwargs.get('source_path'))
        elif task_type == "dynamic":
            return self.create_dynamic_task(agent, kwargs.get('target_url'))
        else:
            raise ValueError(f"Unknown task type: {task_type}")